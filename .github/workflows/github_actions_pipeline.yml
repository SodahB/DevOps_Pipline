
name: CI Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  workflow_dispatch:
    inputs:
      log_errors:
        description: 'Generate error log if tests fail'
        required: true
        default: 'false'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run integration tests
        run: pytest test_integration.py

      - name: Run unit tests
        run: pytest test_unit.py

      - name: Generate error log
        if: ${{ inputs.log_errors == 'true' && failure() }}
        run: echo "Tests failed. Generating error log..."
      
      - name: Upload error log
        if: ${{ inputs.log_errors == 'true' && failure() }}
        uses: actions/upload-artifact@v3
        with:
          name: error-log
          path: error.log

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Build Docker image
        run: docker build -t myapp:${{ github.sha }} .

      - name: Log in to DockerHub
        run: echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      - name: Push Docker image
        run: docker push myapp:${{ github.sha }}

  deploy:
    name: Deploy to Azure
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Azure Login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Deploy to Azure Web App
        run: az webapp create --resource-group myResourceGroup --plan myAppServicePlan --name myAppName --deployment-container-image-name myapp:${{ github.sha }}
